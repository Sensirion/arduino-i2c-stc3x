/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.2.0
 * Yaml Version: 0.1.1
 * Template Version: 0.6.0
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SensirionI2CStc3x.h"
#include "Arduino.h"
#include "SensirionCore.h"
#include <Wire.h>

#define STC3X_I2C_ADDRESS 0x29

SensirionI2CStc3x::SensirionI2CStc3x() {
}

void SensirionI2CStc3x::begin(TwoWire& i2cBus) {
    _i2cBus = &i2cBus;
}

uint16_t SensirionI2CStc3x::setBinaryGas(uint16_t binaryGas) {
    uint16_t error;
    uint8_t buffer[5];
    SensirionI2CTxFrame txFrame(buffer, 5);

    error = txFrame.addCommand(0x3615);
    error |= txFrame.addUInt16(binaryGas);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t
SensirionI2CStc3x::setRelativeHumidity(uint16_t relativeHumidityTicks) {
    uint16_t error;
    uint8_t buffer[5];
    SensirionI2CTxFrame txFrame(buffer, 5);

    error = txFrame.addCommand(0x3624);
    error |= txFrame.addUInt16(relativeHumidityTicks);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t SensirionI2CStc3x::setTemperature(uint16_t temperatureTicks) {
    uint16_t error;
    uint8_t buffer[5];
    SensirionI2CTxFrame txFrame(buffer, 5);

    error = txFrame.addCommand(0x361E);
    error |= txFrame.addUInt16(temperatureTicks);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t SensirionI2CStc3x::setPressure(uint16_t absoluePressure) {
    uint16_t error;
    uint8_t buffer[5];
    SensirionI2CTxFrame txFrame(buffer, 5);

    error = txFrame.addCommand(0x362F);
    error |= txFrame.addUInt16(absoluePressure);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t
SensirionI2CStc3x::measureGasConcentration(uint16_t& gasTicks,
                                           uint16_t& temperatureTicks) {
    uint16_t error;
    uint8_t buffer[6];
    SensirionI2CTxFrame txFrame(buffer, 6);

    error = txFrame.addCommand(0x3639);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(70);

    SensirionI2CRxFrame rxFrame(buffer, 6);
    error = SensirionI2CCommunication::receiveFrame(STC3X_I2C_ADDRESS, 6,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt16(gasTicks);
    error |= rxFrame.getUInt16(temperatureTicks);
    return error;
}

uint16_t
SensirionI2CStc3x::forcedRecalibration(uint16_t referenceConcentration) {
    uint16_t error;
    uint8_t buffer[5];
    SensirionI2CTxFrame txFrame(buffer, 5);

    error = txFrame.addCommand(0x3661);
    error |= txFrame.addUInt16(referenceConcentration);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(66);
    return error;
}

uint16_t SensirionI2CStc3x::enableAutomaticSelfCalibration() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3FEF);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t SensirionI2CStc3x::disableAutomaticSelfCalibration() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3F6E);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t SensirionI2CStc3x::prepareReadState() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3752);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t SensirionI2CStc3x::setSensorState(const uint8_t state[],
                                           uint8_t stateSize) {
    uint16_t error;
    uint8_t buffer[47];
    SensirionI2CTxFrame txFrame(buffer, 47);

    error = txFrame.addCommand(0xE133);
    error |= txFrame.addBytes(state, stateSize);
    if (error) {
        return error;
    }

    return SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                *_i2cBus);
}

uint16_t SensirionI2CStc3x::getSensorState(uint8_t state[], uint8_t stateSize) {
    uint16_t error;
    uint8_t buffer[45];
    SensirionI2CTxFrame txFrame(buffer, 45);

    error = txFrame.addCommand(0xE133);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(0);

    SensirionI2CRxFrame rxFrame(buffer, 45);
    error = SensirionI2CCommunication::receiveFrame(STC3X_I2C_ADDRESS, 45,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getBytes(state, stateSize);
    return error;
}

uint16_t SensirionI2CStc3x::applyState() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3650);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t SensirionI2CStc3x::selfTest(uint16_t& selfTestOutput) {
    uint16_t error;
    uint8_t buffer[3];
    SensirionI2CTxFrame txFrame(buffer, 3);

    error = txFrame.addCommand(0x365B);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(22);

    SensirionI2CRxFrame rxFrame(buffer, 3);
    error = SensirionI2CCommunication::receiveFrame(STC3X_I2C_ADDRESS, 3,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt16(selfTestOutput);
    return error;
}

uint16_t SensirionI2CStc3x::enterSleepMode() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x3677);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(1);
    return error;
}

uint16_t SensirionI2CStc3x::prepareProductIdentifier() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame(buffer, 2);

    error = txFrame.addCommand(0x367C);
    if (error) {
        return error;
    }

    return SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                *_i2cBus);
}

uint16_t SensirionI2CStc3x::readProductIdentifier(uint32_t& productNumber,
                                                  uint8_t serialNumber[],
                                                  uint8_t serialNumberSize) {
    uint16_t error;
    uint8_t buffer[18];
    SensirionI2CTxFrame txFrame(buffer, 18);

    error = txFrame.addCommand(0xE102);
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(STC3X_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(10);

    SensirionI2CRxFrame rxFrame(buffer, 18);
    error = SensirionI2CCommunication::receiveFrame(STC3X_I2C_ADDRESS, 18,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt32(productNumber);
    error |= rxFrame.getBytes(serialNumber, serialNumberSize);
    return error;
}
